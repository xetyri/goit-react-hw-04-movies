{"version":3,"sources":["components/Api/ApiService.js","components/views/DetailPageView/DetailPageView.js"],"names":["axios","defaults","baseURL","POPULAR_URL","API_KEY","SEARCH_URL","ID_URL","getTrendMovies","page","a","get","data","console","log","error","getMovieById","id","getMovieSearch","movie","fetchCast","fetchReviews","Cast","lazy","Reviews","DetailPageView","navigate","useNavigate","location","useLocation","useState","setMovie","status","setStatus","movieId","useParams","useEffect","Api","then","type","onClick","pathname","src","poster_path","alt","original_title","name","vote_average","overview","genres","map","genre","to","fallback","path","element"],"mappings":"iWACAA,IAAMC,SAASC,QAAU,gCACzB,IAAMC,EAAc,qBACdC,EAAU,mCACVC,EAAa,gBACbC,EAAS,UAER,SAAeC,EAAtB,kC,4CAAO,WAA8BC,GAA9B,iBAAAC,EAAA,+EAEoBT,IAAMU,IAAN,UAClBP,EADkB,oBACKC,EADL,iBACqBI,IAHzC,uBAEKG,EAFL,EAEKA,KAGRC,QAAQC,IAAIF,GALT,kBAMIA,GANJ,gCASHC,QAAQE,MAAR,MATG,0D,sBAaA,SAAeC,EAAtB,kC,4CAAO,WAA4BC,GAA5B,iBAAAP,EAAA,+EAEoBT,IAAMU,IAAN,UAAaJ,GAAb,OAAsBU,EAAtB,oBAAoCZ,IAFxD,uBAEKO,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,QAAQE,MAAR,MALG,0D,sBAQA,SAAeG,EAAtB,oC,4CAAO,WAA8BC,EAAOV,GAArC,iBAAAC,EAAA,+EAEoBT,IAAMU,IAAN,UAClBL,EADkB,oBACID,EADJ,kBACqBc,EADrB,iBACmCV,IAHvD,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQE,MAAR,MAPG,0D,sBAUA,SAAeK,EAAtB,kC,4CAAO,WAAyBH,GAAzB,iBAAAP,EAAA,+EAEoBT,IAAMU,IAAN,UAClBJ,GADkB,OACTU,EADS,4BACaZ,IAHjC,uBAEKO,EAFL,EAEKA,KAFL,kBAMIA,GANJ,gCAQHC,QAAQE,MAAR,MARG,0D,sBAYA,SAAeM,EAAtB,kC,4CAAO,WAA4BJ,GAA5B,iBAAAP,EAAA,+EAEoBT,IAAMU,IAAN,UAClBJ,GADkB,OACTU,EADS,4BACaZ,EADb,YAFpB,uBAEKO,EAFL,EAEKA,KAFL,kBAMIA,GANJ,gCAQHC,QAAQE,MAAR,MARG,0D,8JC7CDO,EAAOC,gBAAK,kBAChB,gCAEIC,EAAUD,gBAAK,kBACnB,gCAMa,SAASE,IACpB,IAAMC,EAAWC,cACXC,EAAWC,cACjB,EAA0BC,mBAAS,MAAnC,mBAAOX,EAAP,KAAcY,EAAd,KACA,EAA4BD,mBAAS,QAArC,mBAAOE,EAAP,KAAeC,EAAf,KACQC,EAAYC,cAAZD,QAERE,qBAAU,WACNH,EAAU,WACVI,IAAiBH,GAASI,KAAKP,GAC/BE,EAAU,cACT,CAACC,IAcN,OACI,qCACiB,YAAXF,GAAwB,cAAC,IAAD,IAChC,wBAAQO,KAAK,SAASC,QAfP,WACTZ,EAASa,WAAT,kBAAiCP,IACrCR,GAAU,GAENE,EAASa,WAAT,kBAAiCP,EAAjC,UACJR,GAAU,GAENE,EAASa,WAAT,kBAAiCP,EAAjC,aACJR,GAAU,IAOZ,qBAGCP,GACC,gCACE,qBACEuB,IAAG,yCAAoCvB,EAAMwB,aAC7CC,IAAKzB,EAAM0B,gBAAkB1B,EAAM2B,OAErC,gCACE,6BAAK3B,EAAM0B,gBAAkB1B,EAAM2B,OACnC,iDAAoB3B,EAAM4B,gBAC1B,0CACA,4BAAI5B,EAAM6B,WACV,wCACA,8BACG7B,EAAM8B,OAAOC,KAAI,SAAAC,GAAK,OACrB,+BACGA,EAAML,MADEK,EAAMlC,eAS3B,gCACE,0DACA,+BACE,6BACE,cAAC,IAAD,CAASmC,GAAG,OAAZ,oBAEF,6BACE,cAAC,IAAD,CAASA,GAAG,UAAZ,6BAKN,cAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOC,KAAK,QAAQC,QAAS,cAACjC,EAAD,MAC7B,cAAC,IAAD,CAAOgC,KAAK,WAAWC,QAAS,cAAC/B,EAAD","file":"static/js/7.15015016.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\nconst POPULAR_URL = 'trending/movie/day';\r\nconst API_KEY = 'b1b3673ec244ff3939488ad480401173';\r\nconst SEARCH_URL = '/search/movie';\r\nconst ID_URL = '/movie/';\r\n\r\nexport async function getTrendMovies(page) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${POPULAR_URL}?api_key=${API_KEY}&page=${page}`\r\n    );\r\n    console.log(data);\r\n    return data;\r\n  }\r\n  catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport async function getMovieById(id) {\r\n  try {\r\n    const { data } = await axios.get(`${ID_URL}${id}?api_key=${API_KEY}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\nexport async function getMovieSearch(movie, page) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${SEARCH_URL}?api_key=${API_KEY}&query=${movie}&page=${page}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\nexport async function fetchCast(id) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${ID_URL}${id}/credits?api_key=${API_KEY}`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport async function fetchReviews(id) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${ID_URL}${id}/reviews?api_key=${API_KEY}&page=1`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////","import { useEffect, useState, Suspense, lazy } from 'react';\r\nimport * as Api from '../../Api/ApiService';\r\nimport {Routes, useNavigate, Route, useLocation, useParams, NavLink } from \"react-router-dom\";\r\nimport Loader from '../../Loader';\r\n\r\nconst Cast = lazy(() =>\r\n  import('./Cast'),\r\n);\r\nconst Reviews = lazy(() =>\r\n  import('./Reviews'),\r\n);\r\n\r\n\r\n\r\n\r\nexport default function DetailPageView() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [movie, setMovie] = useState(null);\r\n    const [status, setStatus] = useState('idle');\r\n    const { movieId } = useParams();\r\n\r\n    useEffect(() => {\r\n        setStatus('pending');\r\n        Api.getMovieById(movieId).then(setMovie);\r\n        setStatus('resolved');\r\n      }, [movieId]);\r\n\r\n    const onGoBack = () => {\r\n        if (location.pathname === `/movies/${movieId}`) {\r\n        navigate(-1);\r\n        }\r\n        if (location.pathname === `/movies/${movieId}/cast`) {\r\n        navigate(-2);\r\n        }\r\n        if (location.pathname === `/movies/${movieId}/reviews`) {\r\n        navigate(-2);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n             {status === 'pending' && <Loader />}\r\n      <button type=\"button\" onClick={onGoBack}>\r\n        Go back\r\n      </button>\r\n      {movie && (\r\n        <div >\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\r\n            alt={movie.original_title || movie.name}\r\n          />\r\n          <div>\r\n            <h2>{movie.original_title || movie.name}</h2>\r\n            <p>Average rating: {movie.vote_average}</p>\r\n            <h3>Overview</h3>\r\n            <p>{movie.overview}</p>\r\n            <h3>Genres</h3>\r\n            <div>\r\n              {movie.genres.map(genre => (\r\n                <span key={genre.id}>\r\n                  {genre.name}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <span>Additional information</span>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"cast\">Cast</NavLink>\r\n          </li>\r\n          <li >\r\n            <NavLink to=\"reviews\">Reviews</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <Suspense fallback={<Loader />}>\r\n        <Routes>\r\n          \r\n          <Route path=\"/cast\" element={<Cast />} />\r\n          <Route path=\"/reviews\" element={<Reviews />} />\r\n        </Routes>\r\n      </Suspense>\r\n        </>\r\n    ) \r\n}"],"sourceRoot":""}