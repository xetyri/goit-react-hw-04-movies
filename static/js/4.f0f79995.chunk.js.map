{"version":3,"sources":["components/Api/ApiService.js","components/Gallery/Gallery.module.css","components/Gallery/Gallery.jsx","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","components/views/FilmPageView/FilmPageView.js"],"names":["axios","defaults","baseURL","POPULAR_URL","API_KEY","SEARCH_URL","ID_URL","getTrendMovies","page","a","get","data","console","log","error","getMovieById","id","getMovieSearch","movie","fetchCast","fetchReviews","module","exports","Gallery","movies","location","useLocation","className","s","ImageGallery","map","title","poster_path","original_title","name","release_date","to","pathname","state","from","link","src","alt","slice","Searchbar","onSubmit","useState","query","setQuery","e","preventDefault","trim","alert","SearchForm","SearchForm_input","type","placeholder","autoComplete","onChange","currentTarget","value","toLowerCase","SearchForm_button","SearchForm_button_label","FilmView","navigate","useNavigate","setMovies","status","setStatus","getNewQuery","URLSearchParams","search","useEffect","Api","then","results","Loader","searchQuery"],"mappings":"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","file":"static/js/4.f0f79995.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\nconst POPULAR_URL = 'trending/movie/day';\r\nconst API_KEY = 'b1b3673ec244ff3939488ad480401173';\r\nconst SEARCH_URL = '/search/movie';\r\nconst ID_URL = '/movie/';\r\n\r\nexport async function getTrendMovies(page) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${POPULAR_URL}?api_key=${API_KEY}&page=${page}`\r\n    );\r\n    console.log(data);\r\n    return data;\r\n  }\r\n  catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport async function getMovieById(id) {\r\n  try {\r\n    const { data } = await axios.get(`${ID_URL}${id}?api_key=${API_KEY}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\nexport async function getMovieSearch(movie, page) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${SEARCH_URL}?api_key=${API_KEY}&query=${movie}&page=${page}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\nexport async function fetchCast(id) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${ID_URL}${id}/credits?api_key=${API_KEY}`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport async function fetchReviews(id) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${ID_URL}${id}/reviews?api_key=${API_KEY}&page=1`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"Gallery_ImageGallery__2k_xe\",\"link\":\"Gallery_link__s1l-0\"};","import s from './Gallery.module.css';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Gallery({ movies}) {\r\n  const location = useLocation();\r\n  return (\r\n    <ul className={s.ImageGallery}>\r\n      {movies &&\r\n        movies.map(({ id, title, poster_path, original_title, name , release_date}) => (\r\n          <li key={id}>\r\n            <Link\r\n              to={{\r\n                pathname: `/movies/${id}`,\r\n                state: { from: location },\r\n              }}\r\n              className={s.link}\r\n              >\r\n              <div>\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w300${poster_path}`}\r\n                  alt={original_title || name}\r\n                />\r\n                <div>\r\n                  <h2>{title}</h2>\r\n                  {release_date && <span> ({release_date.slice(0, 4)})</span>}\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nGallery.propTypes = {\r\n  movies: PropTypes.array.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__14vFK\",\"SearchForm\":\"Searchbar_SearchForm__3dt-e\",\"SearchForm_button\":\"Searchbar_SearchForm_button__2xUQA\",\"SearchForm_button_label\":\"Searchbar_SearchForm_button_label__3cI8O\",\"SearchForm_input\":\"Searchbar_SearchForm_input__2oSDA\"};","import { useState } from \"react\";\r\nimport s from './Searchbar.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Searchbar ({onSubmit}) {\r\n    const [query, setQuery] = useState('');\r\n \r\n    const handlChange = e => {\r\n        setQuery(e.currentTarget.value.toLowerCase());\r\n    //     const { value } = e.target;\r\n    // setQuery(value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (query.trim() === '') {\r\n            alert('Nothing found');\r\n            return;\r\n        }\r\n        onSubmit(query);\r\n    }\r\n\r\n    return (\r\n        <div className={s.Searchbar}>\r\n            <form onSubmit={handleSubmit} className={s.SearchForm}>\r\n                <label>\r\n                <input\r\n                    className={s.SearchForm_input}\r\n                    type=\"text\"\r\n                    name=\"movie\"\r\n                    placeholder=\"Enter movie name...\"\r\n                    autoComplete=\"off\"\r\n                    onChange={handlChange}\r\n                    value={query}\r\n                />\r\n                </label>\r\n                <button type=\"submit\" className={s.SearchForm_button}>\r\n                    <span className={s.SearchForm_button_label}>\r\n                        Search\r\n                    </span>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};","import { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router';\r\nimport Searchbar from '../../Searchbar';\r\nimport Loader from '../../Loader';\r\nimport * as Api from '../../Api/ApiService';\r\nimport Gallery from \"../../Gallery\";\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function FilmView() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [movies, setMovies] = useState([]);\r\n    const [status, setStatus] = useState('idle');\r\n\r\n\r\n    const getNewQuery = new URLSearchParams(location.search).get('text');\r\n\r\n    useEffect(() => {\r\n        if (!getNewQuery) {\r\n        return;\r\n        }\r\n        if (getNewQuery.trim() === '') {\r\n            alert('Nothing found, repeat search!');\r\n            return;\r\n        }\r\n        setStatus('pending');\r\n        Api\r\n        .getMovieSearch(getNewQuery)\r\n        .then(({ results }) => setMovies(results));\r\n        setStatus('resolved');\r\n    }, [getNewQuery]);\r\n\r\n    const handleSearchbarSubmit = searchQuery => {\r\n        navigate({ search: `?text=${searchQuery}`, state: { from: location } });\r\n    };\r\n\r\n    return (\r\n      <>\r\n          {status === 'pending' && (\r\n              <Loader/>\r\n          )} \r\n          {/* {console.log(movies)} */}\r\n          <Searchbar onSubmit={handleSearchbarSubmit} />\r\n          <Gallery movies={movies}/>\r\n      </>\r\n  );\r\n}"],"sourceRoot":""}